#!/usr/bin/env python3
"""
Google Cloud Storage接続テストスクリプト（改良版）
"""

import os
import json
from google.cloud import storage
from google.oauth2 import service_account

def test_gcp_connection():
    print("=== Google Cloud Storage接続テスト ===\n")
    
    # 環境変数の確認
    print("1. 環境変数の確認...")
    gcs_project_id = os.getenv('GCS_PROJECT_ID')
    gcs_bucket_name = os.getenv('GCS_BUCKET_NAME')
    gcs_credentials_json = os.getenv('GCS_CREDENTIALS_JSON')
    google_application_credentials = os.getenv('GOOGLE_APPLICATION_CREDENTIALS')
    
    print(f"   GCS_PROJECT_ID: {gcs_project_id}")
    print(f"   GCS_BUCKET_NAME: {gcs_bucket_name}")
    print(f"   GCS_CREDENTIALS_JSON: {'設定あり' if gcs_credentials_json else '設定なし'}")
    print(f"   GOOGLE_APPLICATION_CREDENTIALS: {google_application_credentials}")
    print()
    
    if not all([gcs_project_id, gcs_bucket_name]):
        print("❌ エラー: 必要な環境変数が設定されていません")
        return False
    
    try:
        # 認証情報の作成
        print("2. 認証情報の作成...")
        credentials = None
        
        # 方法1: GOOGLE_APPLICATION_CREDENTIALS ファイルパスから読み込み
        if google_application_credentials and os.path.exists(google_application_credentials):
            print(f"   認証情報ファイルから読み込み: {google_application_credentials}")
            credentials = service_account.Credentials.from_service_account_file(google_application_credentials)
            print("   ✅ ファイルからの認証情報作成に成功")
        
        # 方法2: GCS_CREDENTIALS_JSON 環境変数から読み込み
        elif gcs_credentials_json:
            print("   環境変数のJSON文字列から読み込み")
            credentials_info = json.loads(gcs_credentials_json)
            credentials = service_account.Credentials.from_service_account_info(credentials_info)
            print("   ✅ JSON文字列からの認証情報作成に成功")
        
        # 方法3: デフォルトの認証情報を使用
        else:
            print("   デフォルトの認証情報を使用")
            credentials = None  # storage.Clientがデフォルト認証を使用
        
        print()
        
        # GCSクライアントの作成
        print("3. GCSクライアントの作成...")
        if credentials:
            client = storage.Client(credentials=credentials, project=gcs_project_id)
        else:
            client = storage.Client(project=gcs_project_id)
        print("   ✅ GCSクライアントの作成に成功")
        print()
        
        # バケットの存在確認
        print("4. バケットの存在確認...")
        bucket = client.bucket(gcs_bucket_name)
        if bucket.exists():
            print(f"   ✅ バケット '{gcs_bucket_name}' が存在します")
        else:
            print(f"   ❌ バケット '{gcs_bucket_name}' が存在しません")
            return False
        print()
        
        # バケット情報の取得
        print("5. バケット情報の取得...")
        bucket.reload()
        print(f"   バケット名: {bucket.name}")
        print(f"   作成日時: {bucket.time_created}")
        print(f"   ロケーション: {bucket.location}")
        print(f"   ストレージクラス: {bucket.storage_class}")
        print()
        
        # ファイル一覧の取得（最大5件）
        print("6. ファイル一覧の取得（最大5件）...")
        blobs = list(bucket.list_blobs(max_results=5))
        if blobs:
            print(f"   既存ファイル数: {len(blobs)}件")
            for blob in blobs:
                print(f"   - {blob.name} ({blob.size} bytes)")
        else:
            print("   ファイルはありません（空のバケット）")
        print()
        
        # テストファイルのアップロード
        print("7. テストファイルのアップロード...")
        test_content = "GCS接続テスト - " + str(os.urandom(8).hex())
        test_blob_name = f"test/connection_test_{os.urandom(4).hex()}.txt"
        
        blob = bucket.blob(test_blob_name)
        blob.upload_from_string(test_content, content_type='text/plain')
        print(f"   ✅ テストファイル '{test_blob_name}' のアップロードに成功")
        print()
        
        # テストファイルのダウンロード
        print("8. テストファイルのダウンロード...")
        downloaded_content = blob.download_as_text()
        if downloaded_content == test_content:
            print("   ✅ テストファイルのダウンロードに成功（内容一致）")
        else:
            print("   ❌ テストファイルの内容が一致しません")
            return False
        print()
        
        # テストファイルの削除
        print("9. テストファイルの削除...")
        blob.delete()
        print("   ✅ テストファイルの削除に成功")
        print()
        
        print("🎉 すべてのテストに成功しました！GCP接続は正常に動作しています。")
        return True
        
    except json.JSONDecodeError as e:
        print(f"❌ JSON解析エラー: {e}")
        return False
    except Exception as e:
        print(f"❌ 接続エラー: {e}")
        return False

if __name__ == "__main__":
    # .env.devファイルを読み込み
    env_file = ".env.dev"
    if os.path.exists(env_file):
        print(f"環境変数ファイル '{env_file}' を読み込み中...\n")
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    # 値がクォートで囲まれている場合は除去
                    if value.startswith('"') and value.endswith('"'):
                        value = value[1:-1]
                    elif value.startswith("'") and value.endswith("'"):
                        value = value[1:-1]
                    os.environ[key.strip()] = value.strip()
    else:
        print(f"⚠️  警告: 環境変数ファイル '{env_file}' が見つかりません\n")
    
    success = test_gcp_connection()
    exit(0 if success else 1)

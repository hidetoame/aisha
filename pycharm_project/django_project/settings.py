"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import environ
import os
from pathlib import Path
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
PROJECT_ROOT = BASE_DIR.parent

env = environ.Env()
# ローカル（Docker外）でDjangoを起動したい時、USE_ENV_FILE=Trueにすれば.env.devを読み込む
if os.environ.get("USE_ENV_FILE", "False") == "True":
    env.read_env(os.path.join(PROJECT_ROOT, ".env.dev"))
else:
    env.read_env()

# "DEBUG"の値はbool型で、デフォルト値はFalseとする（"DEBUG"の値を文字列のまま扱わないようにする）
DEBUG = env.bool("DEBUG", default=False)
SECRET_KEY = env("DJANGO_SECRET_KEY")
TSUKURUMA_API_HOST = env("TSUKURUMA_API_HOST")
TSUKURUMA_API_PORT = env("TSUKURUMA_API_PORT")
APP_NAME = env("APP_NAME")
EXE_ENV = env("ENV_FILE").split('.')[-1]
# Render用のALLOWED_HOSTS設定
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["localhost"])

# 本番環境（Render）の場合、追加のホストを許可
if not DEBUG:
    ALLOWED_HOSTS.extend([
        '.onrender.com',  # Renderのドメイン
        'aisha-backend.onrender.com',  # 予想されるサービス名
    ])

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'api',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # SecurityMiddleware のすぐ下、CommonMiddleware の前に入れるのが推奨
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Render用のデータベース設定（DATABASE_URLが利用可能な場合）
import dj_database_url

# DATABASE_URLが設定されている場合（Render本番環境）
DATABASE_URL = env('DATABASE_URL', default=None)
if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    # ローカル開発環境用
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': env('POSTGRES_DB'),
            'USER': env('POSTGRES_USER'),
            'PASSWORD': env('POSTGRES_PASSWORD'),
            'HOST': env('POSTGRES_HOST', default='db'),  # docker-compose.ymlのサービス名と一致
            'PORT': env('POSTGRES_PORT', default='5432'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_ALL_ORIGINS = True

# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",
# ]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,  # 既存のロガーも有効にする（重要）
    "formatters": {
        "default": {
            "format": "[{asctime}] {levelname} {name}: {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "stream": sys.stdout,  # stdoutに出力（Cloud Runはこれを見る）
            "formatter": "default",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",  # DEBUGにすればlogger.debug()も出力されます
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

# Google Cloud Storage Settings
GCS_PROJECT_ID = env('GCS_PROJECT_ID', default='')
GCS_BUCKET_NAME = env('GCS_BUCKET_NAME', default='aisha-car-images')
GCS_CREDENTIALS_JSON = env('GCS_CREDENTIALS_JSON', default='')  # JSON文字列またはファイルパス
GCS_LOCATION = 'car-settings'
GCS_CUSTOM_DOMAIN = f'{GCS_BUCKET_NAME}.storage.googleapis.com'

# Static files (CSS, JavaScript, Images)
# 本番環境（Render）ではWhiteNoiseを使用、ローカルではGCSを使用
if DEBUG:
    # 開発環境ではGCS設定を使用
    STATIC_URL = f'https://{GCS_CUSTOM_DOMAIN}/{GCS_LOCATION}/' if GCS_CUSTOM_DOMAIN else '/static/'
else:
    # 本番環境（Render）ではWhiteNoiseを使用
    STATIC_URL = '/static/'
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Stripe Settings
STRIPE_PUBLISHABLE_KEY = env('STRIPE_PUBLISHABLE_KEY', default='')
STRIPE_SECRET_KEY = env('STRIPE_SECRET_KEY', default='')
STRIPE_WEBHOOK_SECRET = env('STRIPE_WEBHOOK_SECRET', default='')

name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: aisha-462412
  REGION: asia-northeast1
  BACKEND_SERVICE: aisha-backend-prod
  FRONTEND_SERVICE: aisha-frontend-prod
  ARTIFACT_REGISTRY: asia-northeast1-docker.pkg.dev/aisha-462412/aisha

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    outputs:
      backend-url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker
        run: |
          gcloud auth configure-docker asia-northeast1-docker.pkg.dev

      - name: Build Backend Docker image
        run: |
          docker build \
            -t ${{ env.ARTIFACT_REGISTRY }}/backend:${{ github.sha }} \
            -t ${{ env.ARTIFACT_REGISTRY }}/backend:latest \
            -f pycharm_project/Dockerfile.prod \
            ./pycharm_project

      - name: Push Backend Docker image
        run: |
          docker push ${{ env.ARTIFACT_REGISTRY }}/backend:${{ github.sha }}
          docker push ${{ env.ARTIFACT_REGISTRY }}/backend:latest

      - name: Deploy Backend to Cloud Run
        id: deploy
        run: |
          gcloud run deploy ${{ env.BACKEND_SERVICE }} \
            --image=${{ env.ARTIFACT_REGISTRY }}/backend:${{ github.sha }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --add-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:aisha-db \
            --update-env-vars NODE_ENV=production,DEBUG=False,ALLOWED_HOSTS=*.run.app \
            --update-env-vars DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            --update-env-vars DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
            --update-env-vars STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY_LIVE }}" \
            --update-env-vars STRIPE_PUBLISHABLE_KEY="${{ secrets.STRIPE_PUBLISHABLE_KEY_LIVE }}" \
            --update-env-vars SUZURI_API_TOKEN="${{ secrets.SUZURI_API_TOKEN }}" \
            --update-env-vars GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
            --update-env-vars CLIPDROP_API_KEY="${{ secrets.CLIPDROP_API_KEY }}" \
            --update-env-vars GCS_CREDENTIALS_JSON="${{ secrets.GCS_CREDENTIALS_JSON }}" \
            --memory=1Gi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --timeout=300
          
          # Get the service URL
          echo "url=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region=${{ env.REGION }} --format='value(status.url)')" >> $GITHUB_OUTPUT

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker
        run: |
          gcloud auth configure-docker asia-northeast1-docker.pkg.dev

      - name: Build Frontend Docker image
        run: |
          docker build \
            --build-arg VITE_AISHA_API_BASE=${{ needs.deploy-backend.outputs.backend-url }}/api \
            --build-arg VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }} \
            --build-arg VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }} \
            --build-arg VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }} \
            --build-arg VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }} \
            --build-arg VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }} \
            --build-arg VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }} \
            --build-arg VITE_FIREBASE_MEASUREMENT_ID=${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }} \
            --build-arg VITE_STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY_LIVE }} \
            --build-arg VITE_CLIPDROP_API_KEY=${{ secrets.VITE_CLIPDROP_API_KEY }} \
            -t ${{ env.ARTIFACT_REGISTRY }}/frontend:${{ github.sha }} \
            -t ${{ env.ARTIFACT_REGISTRY }}/frontend:latest \
            -f react_project/Dockerfile.prod \
            ./react_project

      - name: Push Frontend Docker image
        run: |
          docker push ${{ env.ARTIFACT_REGISTRY }}/frontend:${{ github.sha }}
          docker push ${{ env.ARTIFACT_REGISTRY }}/frontend:latest

      - name: Deploy Frontend to Cloud Run
        run: |
          gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
            --image=${{ env.ARTIFACT_REGISTRY }}/frontend:${{ github.sha }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --memory=512Mi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --port=80

      - name: Output deployment URLs
        run: |
          echo "Backend URL: ${{ needs.deploy-backend.outputs.backend-url }}"
          echo "Frontend URL: $(gcloud run services describe ${{ env.FRONTEND_SERVICE }} --region=${{ env.REGION }} --format='value(status.url)')"

  run-migrations:
    needs: deploy-backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Run database migrations
        run: |
          # Cloud Runのジョブとして実行
          gcloud run jobs create migrate-db \
            --image=${{ env.ARTIFACT_REGISTRY }}/backend:${{ github.sha }} \
            --region=${{ env.REGION }} \
            --command="python,manage.py,migrate" \
            --set-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:aisha-db \
            --update-env-vars DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            --update-env-vars DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
            --max-retries=1 \
            --parallelism=1 \
            --task-timeout=600 || true
          
          # ジョブを実行
          gcloud run jobs execute migrate-db --region=${{ env.REGION }} --wait
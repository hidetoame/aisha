name: Deploy AISHA to GCP

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 手動実行も可能

env:
  PROJECT_ID: aisha-462412
  REGION: asia-northeast1

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Configure Docker for GCP
      run: |
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
    
    # バックエンド本番用Dockerfile準備
    - name: Prepare Backend Production Dockerfile
      run: |
        cd pycharm_project
        # ローカル用Dockerfileをバックアップ
        mv Dockerfile Dockerfile.local.backup
        # 本番用Dockerfileを使用
        cp Dockerfile.production Dockerfile
        echo "✅ 本番用Dockerfileに切り替えました"
    
    # バックエンドデプロイ
    - name: Deploy Backend to Cloud Run
      run: |
        gcloud run deploy aisha-backend \
          --source ./pycharm_project \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --set-env-vars DEBUG=False \
          --set-env-vars DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} \
          --set-env-vars ALLOWED_HOSTS=*.run.app \
          --set-env-vars DATABASE_URL=${{ secrets.DATABASE_URL }} \
          --set-env-vars TSUKURUMA_API_HOST=localhost \
          --set-env-vars TSUKURUMA_API_PORT=8000 \
          --set-env-vars APP_NAME=AISHA \
          --set-env-vars ENV_FILE=.env.prod \
          --set-env-vars GCS_PROJECT_ID=${{ env.PROJECT_ID }} \
          --set-env-vars GCS_BUCKET_NAME=aisha-car-images \
          --set-env-vars GCS_CREDENTIALS_JSON=${{ secrets.GCS_CREDENTIALS_JSON }} \
          --set-env-vars STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
          --set-env-vars POSTGRES_DB=aisha_prod \
          --set-env-vars POSTGRES_USER=aisha_user \
          --set-env-vars POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
          --set-env-vars POSTGRES_HOST="/cloudsql/${{ env.PROJECT_ID }}:${{ env.REGION }}:aisha-db" \
          --set-env-vars POSTGRES_PORT=5432 \
          --add-cloudsql-instances ${{ env.PROJECT_ID }}:${{ env.REGION }}:aisha-db
    
    # バックエンドURL取得
    - name: Get Backend URL
      run: |
        BACKEND_URL=$(gcloud run services describe aisha-backend --region ${{ env.REGION }} --format 'value(status.url)')
        echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV
        echo "✅ Backend URL: $BACKEND_URL"
    
    # フロントエンド本番用Dockerfile準備
    - name: Prepare Frontend Production Dockerfile
      run: |
        cd react_project
        # ローカル用Dockerfileをバックアップ
        mv Dockerfile Dockerfile.local.backup
        # 本番用Dockerfileを使用
        cp Dockerfile.production Dockerfile
        echo "✅ フロントエンド本番用Dockerfileに切り替えました"
    
    # フロントエンドデプロイ
    - name: Deploy Frontend to Cloud Run
      run: |
        gcloud run deploy aisha-frontend \
          --source ./react_project \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --set-env-vars NODE_ENV=production \
          --set-env-vars VITE_AISHA_API_BASE=${{ env.BACKEND_URL }}/api \
          --set-env-vars VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }} \
          --set-env-vars VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }} \
          --set-env-vars VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }} \
          --set-env-vars VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }} \
          --set-env-vars VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }} \
          --set-env-vars VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }} \
          --set-env-vars VITE_FIREBASE_MEASUREMENT_ID=${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }} \
          --set-env-vars VITE_STRIPE_PUBLISHABLE_KEY=${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }} \
          --set-env-vars VITE_CLIPDROP_API_KEY=${{ secrets.VITE_CLIPDROP_API_KEY }}
    
    # フロントエンドURL取得
    - name: Get Frontend URL
      run: |
        FRONTEND_URL=$(gcloud run services describe aisha-frontend --region ${{ env.REGION }} --format 'value(status.url)')
        echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV
        echo "✅ Frontend URL: $FRONTEND_URL"
    
    # Dockerfileを元に戻す（ローカル環境保護）
    - name: Restore Original Dockerfiles
      if: always()  # 成功・失敗に関わらず実行
      run: |
        echo "🔄 ローカル環境用Dockerfileを復元中..."
        cd pycharm_project
        if [ -f "Dockerfile.local.backup" ]; then
          mv Dockerfile.local.backup Dockerfile
          echo "✅ バックエンドDockerfile復元完了"
        fi
        cd ../react_project
        if [ -f "Dockerfile.local.backup" ]; then
          mv Dockerfile.local.backup Dockerfile
          echo "✅ フロントエンドDockerfile復元完了"
        fi
        echo "🛡️ ローカル環境を保護しました"
    
    # デプロイ結果表示
    - name: Display Deployment Results
      run: |
        echo "🎉 デプロイ完了！"
        echo ""
        echo "📍 本番環境URL:"
        echo "Frontend: ${{ env.FRONTEND_URL }}"
        echo "Backend: ${{ env.BACKEND_URL }}"
        echo ""
        echo "🔍 確認方法:"
        echo "1. Frontend URL にアクセス"
        echo "2. ログイン・新規登録テスト"
        echo "3. 画像生成機能テスト"
        echo ""
        echo "🛡️ ローカル環境は保護されています" 